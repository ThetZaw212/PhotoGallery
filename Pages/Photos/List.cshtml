@page
@model PhotoGallery.Pages.Photos.ListModel
@{
    ViewData["Title"] = "Photo List";
}

<!DOCTYPE html>
<html>
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <style>

        .card-img-top {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-top-left-radius: 0.375rem;
            border-top-right-radius: 0.375rem;
            background-color: #f8f9fa;
        }

        .card {
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

            .card:hover {
                transform: scale(1.03);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
            }


        .scroll-y-container {
            max-height: 60vh;
            overflow-y: auto;
            padding-top: 0.5rem;
            padding-right: 0.5rem;
            position: relative;
        }

            .scroll-y-container::-webkit-scrollbar {
                width: 0;
                background: transparent;
            }

        .scroll-y-container {
            scrollbar-width: none;
            scroll-behavior: smooth;
        }

        .end-of-list {
            color: #6c757d;
            padding: 1rem 0;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeInUp 400ms ease both;
        }

        .skeleton-card {
            border-radius: .375rem;
            background: linear-gradient(90deg, #f6f7f8 25%, #edeef1 37%, #f6f7f8 63%);
            background-size: 400% 100%;
            animation: shimmer 1.2s linear infinite;
            height: 280px;
            display: flex;
            flex-direction: column;
            justify-content: flex-start;
        }

        .skeleton-img {
            height: 180px;
            border-top-left-radius: .375rem;
            border-top-right-radius: .375rem;
            background-color: #e9ecef;
        }

        .skeleton-line {
            height: 12px;
            margin: 10px;
            border-radius: 6px;
            background-color: rgba(0,0,0,0.06);
            width: 80%;
        }

        @@keyframes shimmer {
            0% {
                background-position: 200% 0;
            }

            100% {
                background-position: -200% 0;
            }
        }


    </style>
</head>
<body>
    @await Html.PartialAsync("~/Pages/Shared/_GlobalPopup.cshtml")
    <div class="container py-4">
        <h2 class="mb-4 text-center">PhotoGallery</h2>
        <div class="text-end mb-3">
            <a href="/Photos/Upload" class="btn btn-success">
                <i class="fas fa-upload me-1"></i> Upload Photo
            </a>
        </div>

        <div class="scroll-y-container" id="scrollContainer" aria-busy="false">
            <div class="row" id="photoList">
                <!-- Photos will be placed here -->
            </div>

            <!-- sentinel to help with layout / end message -->
            <div id="listStatus" class="text-center w-100"></div>

            <!-- inline overlay loader shown while paging -->
            @* <div id="loadingOverlay" class="loading-overlay" style="display:none;">
                <div class="spinner-border spinner-border-sm text-primary" role="status" aria-hidden="true"></div>
                <div class="small">Loading more...</div>
            </div> *@
        </div>
    </div>

    <script>
        let skipRows = 0;
        const pageSize = 10;
        let isLoading = false;
        let noMoreData = false;
        const thresholdPx = 250; // when within this many px from bottom, load more

        function appendPhotos(records) {
            records.forEach(photo => {
                const photoHtml = `
                    <div class="col-md-3 mb-4 fade-in">
                        <div class="card shadow-sm">
                            <img src="${photo.thumbnail}" class="card-img-top img-fluid" alt="${photo.title}" />
                            <div class="card-body">
                                <h6 class="card-title">${photo.title}</h6>
                                <div class="d-flex gap-2 mt-3">
                                    <a href="/Photos/Detail/${photo.id}" class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-info-circle me-1"></i> Detail
                                    </a>
                                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="deletePhoto(${photo.id}, this)">
                                        <i class="fas fa-trash-alt me-1"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>`;
                $('#photoList').append(photoHtml);
            });
        }

        function setStatusMessage(messageHtml) {
            $('#listStatus').html(messageHtml);
        }

        function showLoadingOverlay(show) {
            $('#loadingOverlay').toggle(show);
            $('#scrollContainer').attr('aria-busy', show ? 'true' : 'false');
        }

        function showLoadingSkeletons(count) {
            // Add skeleton cards to indicate loading
            const $list = $('#photoList');
            // Avoid stacking skeletons if already present
            if ($list.find('.skeleton-wrapper').length > 0) return;

            for (let i = 0; i < count; i++) {
                const skeleton = `
                    <div class="col-md-3 mb-4 skeleton-wrapper">
                        <div class="skeleton-card">
                            <div class="skeleton-img"></div>
                            <div class="skeleton-line" style="width:60%;"></div>
                            <div class="skeleton-line" style="width:40%; height:10px;"></div>
                        </div>
                    </div>`;
                $list.append(skeleton);
            }
        }

        function removeSkeletons() {
            $('#photoList').find('.skeleton-wrapper').remove();
        }

        function loadPhotos(reset = false) {
            if (isLoading || noMoreData) return;

            if (reset) {
                skipRows = 0;
                $('#photoList').empty();
                noMoreData = false;
                setStatusMessage('');
            }

            isLoading = true;
            // show skeletons 
            showLoadingOverlay(true);
            setStatusMessage('<div class="py-2 visually-hidden">Loading...</div>'); // keep accessible message for screen readers
            const skeletonCount = Math.min(pageSize, 8);
            showLoadingSkeletons(skeletonCount);

            $.ajax({
                url: `/api/Photos`,
                type: 'GET',
                data: {
                    skipRows: skipRows,
                    pageSize: pageSize
                },
                success: function (response) {
                    const records = response.data.records || [];
                    const total = response.data.recordsTotal || 0;

                    // remove skeletons 
                    removeSkeletons();

                    if (records.length > 0) {
                        appendPhotos(records);
                        skipRows += records.length;
                    }

                    if (records.length === 0 || skipRows >= total) {
                        noMoreData = true;
                        if (skipRows === 0) {
                            setStatusMessage('<div class="end-of-list">No photos available.</div>');
                        } else {
                            setStatusMessage('<div class="end-of-list">End of photos.</div>');
                        }
                    } else {
                        setStatusMessage(''); // clear status so sentinel is invisible
                    }
                },
                error: function (xhr) {
                    removeSkeletons();
                    setStatusMessage('<div class="end-of-list text-danger">Failed to load photos.</div>');
                },
                complete: function () {
                    isLoading = false;
                    showLoadingOverlay(false);
                }
            });
        }

        function deletePhoto(id, button) {
            showGlobalPopup('Confirm delete', 'Are you sure you want to delete this photo?', 'info', 0, true, function (confirmed) {
                if (!confirmed) return;

                $.ajax({
                    url: `/api/Photos/${id}`,
                    type: 'DELETE',
                    success: function () {
                        $(button).closest('.col-md-3').remove();
                        skipRows = Math.max(0, skipRows - 1);
                        showGlobalPopup('Deleted', 'Photo deleted successfully.', 'success', 2000);
                    },
                    error: function (xhr) {
                        var msg = xhr && xhr.responseText ? xhr.responseText : 'Failed to delete photo';
                        showGlobalPopup('Delete failed', msg, 'error', 4000);
                    }
                });
            });
        }

        $(document).ready(function () {
            const $container = $('#scrollContainer');

            // initial load
            loadPhotos();

            // debounce scroll handler
            let scrollTimer = null;
            $container.on('scroll', function () {
                if (scrollTimer) clearTimeout(scrollTimer);
                scrollTimer = setTimeout(function () {
                    if (noMoreData || isLoading) return;

                    const container = $container[0];
                    const scrolledFromTop = container.scrollTop;
                    const visibleHeight = container.clientHeight;
                    const totalHeight = container.scrollHeight;

                    if (scrolledFromTop + visibleHeight >= totalHeight - thresholdPx) {
                        loadPhotos();
                    }
                }, 120);
            });

            // keyboard navigation to trigger more load when focusing and pressing PageDown
            $container.on('keydown', function (e) {
                if (e.key === 'PageDown') {
                    loadPhotos();
                }
            });
        });
    </script>
</body>
</html>